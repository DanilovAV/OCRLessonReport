using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using OCRLessonReport.Imaging;

namespace OCRLessonReport.Helpers
{
    public class DataGridColumnBehaviour
    {

        public static DependencyProperty ColumnItemsProperty = DependencyProperty.RegisterAttached("ColumnItems", typeof(List<ColumnItem>), typeof(DataGridColumnBehaviour), new PropertyMetadata(OnColumnItemsPropertyChanged));

        public static void SetColumnItems(DataGrid element, object value)
        {
            element.SetValue(ColumnItemsProperty, value);
        }

        [AttachedPropertyBrowsableForType(typeof(DataGrid))]
        public static object GetColumnItems(DataGrid element)
        {
            return element.GetValue(ColumnItemsProperty);
        }

        private static void OnColumnItemsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var dataGrid = d as DataGrid;          
            dataGrid.AutoGeneratedColumns += dataGrid_AutoGeneratedColumns;          
        }       

        private static void dataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var dataGrid = sender as DataGrid;
            var columns = dataGrid.GetValue(ColumnItemsProperty) as List<ColumnItem>;

            if (columns != null)
            {
                for (int i = 0; i < columns.Count; i++)                
                    dataGrid.Columns[i].Header = columns[i].Header;                
            }            
        }
    }

    public class ColumnItem
    {
        public string Header { get; set; }
        public DataColumn DataColumn { get; set; }

        public ColumnItem(string header, DataColumn dataColumn)
        {
            Header = header;
            DataColumn = dataColumn;
        }
    }
}
